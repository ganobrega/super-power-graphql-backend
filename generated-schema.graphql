# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumUserPermissionFieldUpdateOperationsInput {
  set: UserPermission
}

input EnumUserPermissionFilter {
  equals: UserPermission
  in: [UserPermission!]
  not: NestedEnumUserPermissionFilter
  notIn: [UserPermission!]
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumUserPermissionFilter {
  equals: UserPermission
  in: [UserPermission!]
  not: NestedEnumUserPermissionFilter
  notIn: [UserPermission!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User!
  comments(cursor: PostCommentWhereUniqueInput, distinct: [PostCommentDistinctFieldEnum!], orderBy: [PostCommentOrderByInput!], skip: Int, take: Int, where: PostCommentWhereInput): [PostComment!]
  createdAt: DateTime!
  id: String!
  images(cursor: PostImageWhereUniqueInput, distinct: [PostImageDistinctFieldEnum!], orderBy: [PostImageOrderByInput!], skip: Int, take: Int, where: PostImageWhereInput): [PostImage!]
  published: Boolean!
  text: String
  updatedAt: DateTime!
  userId: String!
}

type PostComment {
  createdAt: DateTime!
  id: String!
  postId: String
  text: String!
  updatedAt: DateTime!
  userId: String!
}

input PostCommentCreateManyWithoutAuthorInput {
  connect: [PostCommentWhereUniqueInput!]
  connectOrCreate: [PostCommentCreateOrConnectWithoutauthorInput!]
  create: [PostCommentCreateWithoutAuthorInput!]
}

input PostCommentCreateManyWithoutPostInput {
  connect: [PostCommentWhereUniqueInput!]
  connectOrCreate: [PostCommentCreateOrConnectWithoutpostInput!]
  create: [PostCommentCreateWithoutPostInput!]
}

input PostCommentCreateOrConnectWithoutauthorInput {
  create: PostCommentCreateWithoutAuthorInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentCreateOrConnectWithoutpostInput {
  create: PostCommentCreateWithoutPostInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  post: PostCreateOneWithoutCommentsInput
  text: String!
  updatedAt: DateTime
}

input PostCommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput!
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
}

enum PostCommentDistinctFieldEnum {
  createdAt
  id
  postId
  text
  updatedAt
  userId
}

input PostCommentListRelationFilter {
  every: PostCommentWhereInput
  none: PostCommentWhereInput
  some: PostCommentWhereInput
}

input PostCommentOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostCommentScalarWhereInput {
  AND: [PostCommentScalarWhereInput!]
  NOT: [PostCommentScalarWhereInput!]
  OR: [PostCommentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  postId: StringNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostCommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostCommentUpdateManyWithWhereWithoutAuthorInput {
  data: PostCommentUpdateManyMutationInput!
  where: PostCommentScalarWhereInput!
}

input PostCommentUpdateManyWithWhereWithoutPostInput {
  data: PostCommentUpdateManyMutationInput!
  where: PostCommentScalarWhereInput!
}

input PostCommentUpdateManyWithoutAuthorInput {
  connect: [PostCommentWhereUniqueInput!]
  connectOrCreate: [PostCommentCreateOrConnectWithoutauthorInput!]
  create: [PostCommentCreateWithoutAuthorInput!]
  delete: [PostCommentWhereUniqueInput!]
  deleteMany: [PostCommentScalarWhereInput!]
  disconnect: [PostCommentWhereUniqueInput!]
  set: [PostCommentWhereUniqueInput!]
  update: [PostCommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostCommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostCommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostCommentUpdateManyWithoutPostInput {
  connect: [PostCommentWhereUniqueInput!]
  connectOrCreate: [PostCommentCreateOrConnectWithoutpostInput!]
  create: [PostCommentCreateWithoutPostInput!]
  delete: [PostCommentWhereUniqueInput!]
  deleteMany: [PostCommentScalarWhereInput!]
  disconnect: [PostCommentWhereUniqueInput!]
  set: [PostCommentWhereUniqueInput!]
  update: [PostCommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostCommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [PostCommentUpsertWithWhereUniqueWithoutPostInput!]
}

input PostCommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostCommentUpdateWithoutAuthorInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentUpdateWithWhereUniqueWithoutPostInput {
  data: PostCommentUpdateWithoutPostInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostCommentUpdateWithoutPostInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostCommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCommentCreateWithoutAuthorInput!
  update: PostCommentUpdateWithoutAuthorInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentUpsertWithWhereUniqueWithoutPostInput {
  create: PostCommentCreateWithoutPostInput!
  update: PostCommentUpdateWithoutPostInput!
  where: PostCommentWhereUniqueInput!
}

input PostCommentWhereInput {
  AND: [PostCommentWhereInput!]
  NOT: [PostCommentWhereInput!]
  OR: [PostCommentWhereInput!]
  author: UserRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostRelationFilter
  postId: StringNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostCommentWhereUniqueInput {
  id: String
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  comments: PostCommentCreateManyWithoutPostInput
  createdAt: DateTime
  id: String
  images: PostImageCreateManyWithoutPostInput
  published: Boolean
  text: String
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutcommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutauthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutcommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  comments: PostCommentCreateManyWithoutPostInput
  createdAt: DateTime
  id: String
  images: PostImageCreateManyWithoutPostInput
  published: Boolean
  text: String
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput!
  createdAt: DateTime
  id: String
  images: PostImageCreateManyWithoutPostInput
  published: Boolean
  text: String
  updatedAt: DateTime
}

enum PostDistinctFieldEnum {
  createdAt
  id
  published
  text
  updatedAt
  userId
}

type PostImage {
  id: String!
  postId: String
  source: String!
}

input PostImageCreateManyWithoutPostInput {
  connect: [PostImageWhereUniqueInput!]
  connectOrCreate: [PostImageCreateOrConnectWithoutpostInput!]
  create: [PostImageCreateWithoutPostInput!]
}

input PostImageCreateOrConnectWithoutpostInput {
  create: PostImageCreateWithoutPostInput!
  where: PostImageWhereUniqueInput!
}

input PostImageCreateWithoutPostInput {
  id: String
  source: String!
}

enum PostImageDistinctFieldEnum {
  id
  postId
  source
}

input PostImageListRelationFilter {
  every: PostImageWhereInput
  none: PostImageWhereInput
  some: PostImageWhereInput
}

input PostImageOrderByInput {
  id: SortOrder
  postId: SortOrder
  source: SortOrder
}

input PostImageScalarWhereInput {
  AND: [PostImageScalarWhereInput!]
  NOT: [PostImageScalarWhereInput!]
  OR: [PostImageScalarWhereInput!]
  id: StringFilter
  postId: StringNullableFilter
  source: StringFilter
}

input PostImageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  source: StringFieldUpdateOperationsInput
}

input PostImageUpdateManyWithWhereWithoutPostInput {
  data: PostImageUpdateManyMutationInput!
  where: PostImageScalarWhereInput!
}

input PostImageUpdateManyWithoutPostInput {
  connect: [PostImageWhereUniqueInput!]
  connectOrCreate: [PostImageCreateOrConnectWithoutpostInput!]
  create: [PostImageCreateWithoutPostInput!]
  delete: [PostImageWhereUniqueInput!]
  deleteMany: [PostImageScalarWhereInput!]
  disconnect: [PostImageWhereUniqueInput!]
  set: [PostImageWhereUniqueInput!]
  update: [PostImageUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostImageUpdateManyWithWhereWithoutPostInput!]
  upsert: [PostImageUpsertWithWhereUniqueWithoutPostInput!]
}

input PostImageUpdateWithWhereUniqueWithoutPostInput {
  data: PostImageUpdateWithoutPostInput!
  where: PostImageWhereUniqueInput!
}

input PostImageUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  source: StringFieldUpdateOperationsInput
}

input PostImageUpsertWithWhereUniqueWithoutPostInput {
  create: PostImageCreateWithoutPostInput!
  update: PostImageUpdateWithoutPostInput!
  where: PostImageWhereUniqueInput!
}

input PostImageWhereInput {
  AND: [PostImageWhereInput!]
  NOT: [PostImageWhereInput!]
  OR: [PostImageWhereInput!]
  id: StringFilter
  post: PostRelationFilter
  postId: StringNullableFilter
  source: StringFilter
}

input PostImageWhereUniqueInput {
  id: String
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  text: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  published: BoolFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: PostCommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: PostImageUpdateManyWithoutPostInput
  published: BoolFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutcommentsInput
  create: PostCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  comments: PostCommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: PostImageUpdateManyWithoutPostInput
  published: BoolFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: PostImageUpdateManyWithoutPostInput
  published: BoolFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  comments: PostCommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  images: PostImageListRelationFilter
  published: BoolFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  password: String!
  permission: UserPermission!
  phone: String!
  updatedAt: DateTime!
}

input UserCreateInput {
  comments: PostCommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  id: String
  name: String!
  password: String!
  permission: UserPermission!
  phone: String!
  posts: PostCreateManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutcommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutpostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  id: String
  name: String!
  password: String!
  permission: UserPermission!
  phone: String!
  posts: PostCreateManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  comments: PostCommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  id: String
  name: String!
  password: String!
  permission: UserPermission!
  phone: String!
  updatedAt: DateTime
}

enum UserDistinctFieldEnum {
  createdAt
  email
  id
  name
  password
  permission
  phone
  updatedAt
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  permission: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

enum UserPermission {
  ADMIN
  SUPPORT
  USER
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  comments: PostCommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permission: EnumUserPermissionFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permission: EnumUserPermissionFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permission: EnumUserPermissionFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  comments: PostCommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permission: EnumUserPermissionFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  comments: PostCommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  permission: EnumUserPermissionFilter
  phone: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
